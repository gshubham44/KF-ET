# -*- coding: utf-8 -*-
"""
Script to run Kalman smoother to generate the best ET estimate at each time step

Input arguments
combo_file: Filename with full path of the file containing different ET estimates at each time step. This is the output file generated by gen_combos_for_kalman_filtering.py
et_initial_file: Filename with full path of the moving window averaged initial ET estimate file in the appropriate format
et_initial_name: String indicating data source for the initial ET estimate
op_file: Filename with full path to store the outputs

Outputs
Single NetCDF file containing the best ET estimate at each time step
"""
# Importing modules
import netCDF4 as nc
import numpy as np
import matplotlib.pyplot as plt
import datetime as dt

# Specifying inputs
combo_file = 'D:/IISC_COURSES/GEODETIC_SIGNAL_PROCESSING/PROJECT/KALMAN_FILTERING/TRIAL4/ET_MEASUREMENT_COMBOS_DEC2014_DEC2016.nc'
et_initial_file = 'D:/IISC_COURSES/GEODETIC_SIGNAL_PROCESSING/PROJECT/TIME_SERIES/ET/ET_ERA5.nc'
et_initial_name = 'ERA5'
op_file = 'D:/IISC_COURSES/GEODETIC_SIGNAL_PROCESSING/PROJECT/KALMAN_FILTERING/TRIAL4/KALMAN_FILTERING_OUTPUTS_DEC2014_DEC2016.nc'

# Getting the required variables from the combinations file
ds_combo = nc.Dataset(combo_file)
lat_values = ds_combo['lat'][:]
lon_values = ds_combo['lon'][:]
time_values = ds_combo['time'][:]
time_units = ds_combo['time'].units
et_measurement = ds_combo['et_mm'][:]
et_meas_unc = ds_combo['uncertainty_mm'][:]
combo_name = ds_combo['combo_name'][:]

# Getting the required variables from the ET initial estimate file
ds_et_initial = nc.Dataset(et_initial_file)
et_lat_values = ds_et_initial['lat'][:]
et_lon_values = ds_et_initial['lon'][:]
et_time_values = ds_et_initial['time'][:]
et_time_units = ds_et_initial['time'].units
et_initial_estimate = ds_et_initial['et_mm'][:]
et_init_est_unc = ds_et_initial['uncertainty_mm'][:]

# Subsetting the initial et estimate file to required time of interest
time_start_combo = nc.num2date(time_values[0],time_units)
time_start_interest = dt.datetime(time_start_combo.year,time_start_combo.month,1,0,0,0)
time_start_interest_num = nc.date2num(time_start_interest,et_time_units)

time_end_combo = nc.num2date(time_values[-1],time_units)
if (time_end_combo.month < 12):
    time_end_interest = dt.datetime(time_end_combo.year,time_end_combo.month+1,1,0,0,0)
else:
    time_end_interest = dt.datetime(time_end_combo.year+1,1,1,0,0,0)
time_end_interest_num = nc.date2num(time_end_interest,et_time_units)

index_interest = np.where((et_time_values >= time_start_interest_num) & (et_time_values <= time_end_interest_num))[0]
et_initial_estimate_interest = et_initial_estimate[index_interest]
et_init_est_unc_interest = et_init_est_unc[index_interest]

#### Kalman filtering
n_combos = np.size(combo_name)
n_times = np.size(time_values)
n_lat = np.size(lat_values)
n_lon = np.size(lon_values)

et_estimate = np.zeros((n_combos+1,n_times,n_lat,n_lon),dtype=np.float32)
et_estimate_error = np.zeros((n_combos+1,n_times,n_lat,n_lon),dtype=np.float32)
kalman_gain = np.zeros((n_combos+1,n_times,n_lat,n_lon),dtype=np.float32)

# Initialising
et_estimate[0] = et_initial_estimate_interest
et_estimate_error[0] = et_init_est_unc_interest

# Looping for the different combinations
for i in range(1,n_combos+1):
    kalman_gain[i] = et_estimate_error[i-1]/(et_estimate_error[i-1] + et_meas_unc[i-1])
    et_estimate[i] = et_estimate[i-1] + kalman_gain[i]*(et_measurement[i-1] - et_estimate[i-1])
    et_estimate_error[i] = et_meas_unc[i-1]*et_estimate_error[i-1]/(et_meas_unc[i-1]+et_estimate_error[i-1])

# Making the required output variables
op_lat = lat_values
op_lon = lon_values
op_time = time_values

op_et_initial = et_estimate[0]
op_et_initial_error = et_estimate_error[0]

op_et_estimate = et_estimate[1:]
op_et_estimate_error = et_estimate_error[1:]
op_kalman_gain = kalman_gain[1:]
op_combo_names = combo_name[:]

# Deleting unused variables for space
del et_estimate, et_estimate_error, kalman_gain

### Writing out the netCDF file
# Creating NetCDF file
ncfile = nc.Dataset(op_file,mode='w')

# Defining the dimensions in the NetCDF file
lat_dim = ncfile.createDimension('lat', n_lat)
lon_dim = ncfile.createDimension('lon', n_lon)
time_dim = ncfile.createDimension('time', n_times)
combo_dim = ncfile.createDimension('combo',n_combos)

# Defining the variables to be stored in the netCDF file along with their long names and appropriate units
lat = ncfile.createVariable('lat', np.float32, ('lat',))
lat.units = 'degrees_north'
lat.long_name = 'latitude'
lon = ncfile.createVariable('lon', np.float32, ('lon',))
lon.units = 'degrees_east'
lon.long_name = 'longitude'
time = ncfile.createVariable('time', np.float64, ('time',))
time.units = time_units
time.long_name = 'time'
combo = ncfile.createVariable('combo', np.int16, ('combo',))
combo_names = ncfile.createVariable('combo_names', str, ('combo',))
combo_names.long_name = 'Name of the combinations'

et_initial = ncfile.createVariable('et_initial', np.float64, ('time','lat','lon'))
et_initial.units = 'mm'
et_initial.long_name = 'Initial ET values (' + et_initial_name + ')'
et_initial_error = ncfile.createVariable('et_initial_error', np.float64, ('time','lat','lon'))
et_initial_error.units = 'mm'
et_initial_error.long_name = 'Uncertainties of ET values'

et_estimate = ncfile.createVariable('et_estimate', np.float64, ('combo','time','lat','lon'))
et_estimate.units = 'mm'
et_estimate.long_name = 'Estimates of ET values'
et_estimate_error = ncfile.createVariable('et_estimate_error', np.float64, ('combo','time','lat','lon'))
et_estimate_error.units = 'mm'
et_estimate_error.long_name = 'Uncertainties of estimates of ET values'
kalman_gain = ncfile.createVariable('kalman_gain', np.float64, ('combo','time','lat','lon'))
kalman_gain.long_name = 'Kalman Gain'

# Assigning values to the variables
lat[:] = op_lat
lon[:] = op_lon
time[:] = op_time
combo[:] = np.arange(0,n_combos)
combo_names[:] = op_combo_names

et_initial[:] = op_et_initial
et_initial_error[:] = op_et_initial_error

et_estimate[:] = op_et_estimate
et_estimate_error[:] = op_et_estimate_error
kalman_gain[:] = op_kalman_gain

# Closing the netCDF file
ncfile.close()
